  ListNode **pHead = new ListNode*();
    addListNode(pHead,1);
    addListNode(pHead,2);
    addListNode(pHead,3);
    addListNode(pHead,4);
    addListNode(pHead,5);
    addListNode(pHead,6);
    ListNode *p = FindKthToTail(*pHead, 1);
    gh::print(p->m_nValue);

    //    char matrix[12] = {'a','b','t','g','c','f','c','s','j','d','e','h'};
    //    gh::print(hasPath(matrix, 3,4,"bfce"));
    //    gh::print(hasPath(matrix, 3,4,"abfb"));
    //    gh::print(maxProductAfterCutting_solution(8));
    //    Print1ToMaxOfDigits(3);
        ListNode **phead = new ListNode*();
        addListNode(phead,1);
        addListNode(phead,1);
        addListNode(phead,2);
        addListNode(phead,2);
        addListNode(phead,3);
        addListNode(phead,3);
        printListNode(phead);
    //    ListNode *head = newListNode(10);
    //    addListNode(head, newListNode(1));
    //    addListNode(head, newListNode(1));
    //    addListNode(head, newListNode(2));
    //    addListNode(head, newListNode(2));
    //    addListNode(head, newListNode(3));
    //    addListNode(head, newListNode(4));
    //    printListNode(head);

    //    ListNode *pToBeDelete = head->m_pNext;
    //    DeleteNode(head, pToBeDelete);
    //    *phead = head;
        DeleteDuplication(phead);
        printListNode(phead);

ListNode *head = newListNode(1);
    addListNode(head, newListNode(2));
    addListNode(head, newListNode(3));
    addListNode(head, newListNode(4));
    addListNode(head, newListNode(5));
    addListNode(head, newListNode(6));
    addListNode(head, newListNode(7));
    ListNode *pNode4 = nullptr;
    ListNode *p = head;
    while (p != nullptr) {
        if (p->m_nValue == 4) {
            pNode4 = p;
            break;
        }
        p = p->m_pNext;
    }
    p = head;
    while (p->m_pNext!= nullptr) {
        p = p->m_pNext;
    }
    p->m_pNext = pNode4;

//    while (head != nullptr) {
//        gh::print(head->m_nValue);
//        head = head->m_pNext;
//    }
    p = EntryNodeLoop(head);
    gh::print(p->m_nValue);

    int numbers1[4] = {1,3,5,7};
        int numbers2[4] = {2,4,5,8};
        ListNode* pHead1 = newListNode(numbers1, 4);
        ListNode* pHead2 = newListNode(numbers2, 4);
        ListNode *pHead = mergeListNodeByRecursion(pHead1, pHead2);
        while (pHead!= nullptr) {
            gh::print(pHead->m_nValue);
            pHead = pHead->m_pNext;
        }
        err_msg("asd");


         int numbers[4][4] = {{1,2,3,4},{5,6,7,8}, {9,10,11,12}, {13,14,15,16}};
            int **nums = new int*[4];
            for (int i = 0; i < 4; ++i)
                nums[i] = new int[4];
            int k = 1;
            for (int i = 0; i < 4; ++i)
                for (int j = 0; j < 4; ++j) {
                    nums[i][j] = k++;
                }

            k = 1;
            int **nums2 = new int*[5];
            for (int i = 0; i < 3; ++i)
                nums2[i] = new int[5];

            for (int i = 0; i < 3; ++i)
                for (int j = 0; j < 5; ++j) {
                    nums2[i][j] = k++;
                }

            PrintMatrixClockwisely(nums2, 5, 3);
            printf("\n");
            PrintMatrixClockwisely(nums, 4, 4);
            //31
               int pPush[5] = {1,2,3,4,5};
               int pPop[5] = {4,5,5,1,2};
               gh::print(isStackOrder(pPush,pPop,5));

//37
//   BinaryTreeNode *root = createBinaryTreeNodebyPre("1248##9##50##1##362##3##74##5##");
//   PrintFromTopToBottom3(root);
//    std::vector<int> number;
//    number.emplace_back(5);
//    number.emplace_back(7);
//    number.emplace_back(6);
//    number.emplace_back(9);
//    number.emplace_back(11);
//    number.emplace_back(10);
//    number.emplace_back(8);
//
//    std::vector<int> number2;
//    number2.emplace_back(7);
//    number2.emplace_back(4);
//    number2.emplace_back(6);
//    number2.emplace_back(5);
//    number[0] = 5;
//    number[1] = 7;
//    number[2] = 6;
//    number[3] = 9;
//    number[4] = 11;
//    number[5] = 10;
//    number[6] = 8;
//    gh::print(VerifySquenceOFBST(number));
//    gh::print(VerifySquenceOFBST(number2));
//   BinaryTreeNode *root = createBinaryTreeNodebyPre("134##2##5##");
//   FindPath(root, 6);
//    ComplexListNode *pHead = new ComplexListNode();
//    pHead->m_nValue = 1;
//    ComplexListNode *p1 = new ComplexListNode();
//    p1->m_nValue = 2;
//    ComplexListNode *p2 = new ComplexListNode();
//    p2->m_nValue = 3;
//    ComplexListNode *p3 = new ComplexListNode();
//    p3->m_nValue = 4;
//    ComplexListNode *p4 = new ComplexListNode();
//    p4->m_nValue = 5;
//    pHead->m_pNext = p1;
//    p1->m_pNext = p2;
//    p2->m_pNext = p3;
//    p3->m_pNext = p4;
//    ComplexListNode * pCopy = Clone(pHead);
//    while (pHead != nullptr) {
//        printf("%d ", pHead->m_nValue);
//        pHead = pHead->m_pNext;
//    }
//    printf("\n");
//    while (pCopy != nullptr) {
//        printf("%d ", pCopy->m_nValue);
//        pCopy = pCopy->m_pNext;
//    }
    BinaryTreeNode *root = createBinaryTreeNodebyPre("421##3##65##7##");
//    root = Convert(root);
//    while (root) {
//        printf("%d ", root->m_nValue);
//        if (!root->m_pRight)
//            break;
//        root = root->m_pRight;
//    }
//    printf("\n");
//
//    while (root) {
//        printf("%d ", root->m_nValue);
//        root = root->m_pLeft;
//    }
//    std::string tree = Serialize(root);
//    gh::print(tree);
//    BinaryTreeNode *pRoot = new BinaryTreeNode;
//    std::string tree = "14,2,1,#,#,3,#,#,6,5,#,#,7,#,#";
//    Deserialize(&pRoot, tree);
//    PreBinaryTree(pRoot);